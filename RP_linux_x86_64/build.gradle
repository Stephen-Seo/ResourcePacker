
def getVersionName = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'describe', '--tags'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

version = getVersionName()

apply plugin: 'cpp'

model {
    buildTypes {
        debug
        release
    }

    platforms {
        linux_x86_64 {
            operatingSystem "linux"
            architecture "x86_64"
        }
    }

    toolChains {
        gcc(Gcc) {
            path "/usr/bin"
            eachPlatform() {
                cppCompiler.executable "g++"
            }
            target("linux_x86_64")
        }
    }
}

libraries {
    ResourcePacker {
        targetPlatforms "linux_x86_64"

        binaries.all {
            cppCompiler.args "-std=c++11", "-Wall", "-Wextra"

            if(buildType == buildTypes.debug) {
                cppCompiler.args "-O0", "-g"
            }
            if(buildType == buildTypes.release) {
                cppCompiler.define "NDEBUG"
                cppCompiler.args "-O3"
            }
        }
        binaries.withType(SharedLibraryBinarySpec) { binary ->
            cppCompiler.define "BUILD_SHARED_LIBS"
        }
    }
}

executables {
    RP_main {
        targetPlatforms "linux_x86_64"

        binaries.all {
            cppCompiler.args "-std=c++11", "-Wall", "-Wextra"

            if(buildType == buildTypes.debug) {
                cppCompiler.args "-O0", "-g"
            }
            if(buildType == buildTypes.release) {
                cppCompiler.define "NDEBUG"
                cppCompiler.args "-O3"
            }
        }
    }
}

sources {
    ResourcePacker {
        cpp {
            source {
                srcDir "${projectDir}/../src/ResourcePacker/cpp"
                include "*.cpp"
            }
            exportedHeaders {
                srcDir "${projectDir}/../src/ResourcePacker/headers"
            }
        }
    }
    RP_main {
        cpp {
            lib libraries.ResourcePacker
            source {
                srcDir "${projectDir}/../src/RP_main/cpp"
                include "*.cpp"
            }
            exportedHeaders {
                srcDir "${projectDir}/../src/ResourcePacker/headers"
            }
        }
    }
}

