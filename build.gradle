
apply plugin: 'cpp'

model {
    buildTypes {
        debug
        release
    }

    platforms {
        linux_x86 {
            operatingSystem "linux"
            architecture "x86"
        }
        linux_x86_64 {
            operatingSystem "linux"
            architecture "x86_64"
        }

        windows_x86 {
            operatingSystem "windows"
            architecture "x86"
        }
        windows_x86_64 {
            operatingSystem "windows"
            architecture "x86_64"
        }
    }

    toolChains {
        gcc(Gcc) {
            path "/usr/bin"
            eachPlatform() {
                cppCompiler.executable "g++"
            }
            target("linux_x86")
            target("linux_x86_64")
        }
        mingw_x86(Gcc) {
            path "/usr/bin"
            eachPlatform() {
                cCompiler.executable "i686-w64-mingw32-gcc"
                cppCompiler.executable "i686-w64-mingw32-g++"
                linker.executable "i686-w64-mingw32-g++"
                assembler.executable "i686-w64-mingw32-as"
                staticLibArchiver.executable "i686-w64-mingw32-ar"
            }
            target("windows_x86")
        }
        mingw_x86_64(Gcc) {
            path "/usr/bin"
            eachPlatform() {
                cCompiler.executable "x86_64-w64-mingw32-gcc"
                cppCompiler.executable "x86_64-w64-mingw32-g++"
                linker.executable "x86_64-w64-mingw32-g++"
                assembler.executable "x86_64-w64-mingw32-as"
                staticLibArchiver.executable "x86_64-w64-mingw32-ar"
            }
            target("windows_x86_64")
        }
    }
}

libraries {
    ResourcePacker {
        targetPlatforms "linux_x86", "linux_x86_64", "windows_x86", "windows_x86_64"

        binaries.all {
            cppCompiler.args "-std=c++11", "-Wall", "-Wextra"

            if(buildType == buildTypes.debug) {
                cppCompiler.args "-O0", "-g"
            }
            if(buildType == buildTypes.release) {
                cppCompiler.define "NDEBUG"
                cppCompiler.args "-O3"
            }
            if(targetPlatform.getDisplayName().endsWith("'linux_x86'")) {
                cppCompiler.args "-m32", "-march=i686", "-mtune=generic"
                linker.args "-m32"
            }
            if(targetPlatform.getDisplayName().endsWith("'windows_x86'")) {
                //cppCompiler.args "-I/usr/i686-w64-mingw32/include"//, "-nostdinc", "-nostdinc++"
            }
            if(targetPlatform.getDisplayName().endsWith("'windows_x86_64'")) {
                //cppCompiler.args "-I/usr/x86_64-w64-mingw32/include"//, "-nostdinc", "-nostdinc++"
            }
        }
        binaries.withType(SharedLibraryBinarySpec) {
            cppCompiler.define "BUILD_SHARED_LIBS"
            if(targetPlatform.getDisplayName().endsWith("'windows_x86'")) {
                cppCompiler.define "ResourcePacker_EXPORTS"
                linker.args "-Wl,--out-implib,libResourcePacker.a"
            }
            if(targetPlatform.getDisplayName().endsWith("'windows_x86_64'")) {
                cppCompiler.define "ResourcePacker_EXPORTS"
                linker.args "-Wl,--out-implib,libResourcePacker.a"
            }
        }
    }
}

executables {
    main {
        targetPlatforms "linux_x86", "linux_x86_64", "windows_x86", "windows_x86_64"

        binaries.all {
            cppCompiler.args "-std=c++11", "-Wall", "-Wextra"

            if(buildType == buildTypes.debug) {
                cppCompiler.args "-O0", "-g"
            }
            if(buildType == buildTypes.release) {
                cppCompiler.define "NDEBUG"
                cppCompiler.args "-O3"
            }
            if(targetPlatform.getDisplayName().endsWith("'linux_x86'")) {
                cppCompiler.args "-m32", "-march=i686", "-mtune=generic"
                linker.args "-m32"
            }
            if(targetPlatform.getDisplayName().endsWith("'windows_x86'")) {
                cppCompiler.args "-I/usr/i686-w64-mingw32/include"//, "-nostdinc", "-nostdinc++"
            }
            if(targetPlatform.getDisplayName().endsWith("'windows_x86_64'")) {
                cppCompiler.args "-I/usr/x86_64-w64-mingw32/include"//, "-nostdinc", "-nostdinc++"
            }
        }
    }
}

sources {
    main {
        cpp {
            lib libraries.ResourcePacker
            exportedHeaders {
                srcDir "src/ResourcePacker/headers"
            }
        }
    }
}

