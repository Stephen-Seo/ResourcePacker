
def getVersionName = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'describe', '--tags'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

version = getVersionName()

apply plugin: 'cpp'

model {
    buildTypes {
        debug
        release
    }

    platforms {
        linux_x86 {
            operatingSystem "linux"
            architecture "x86"
        }
        linux_x86_64 {
            operatingSystem "linux"
            architecture "x86_64"
        }
        windows_x86 {
            operatingSystem "windows"
            architecture "x86"
        }
        windows_x86_64 {
            operatingSystem "windows"
            architecture "x86_64"
        }
    }

    toolChains {
        gcc(Gcc) {
            path "/usr/bin"
            eachPlatform() {
                cppCompiler.executable "g++"
            }
            target("linux_x86") {
                cppCompiler.withArguments { List<String> args ->
                    args << "-m32" << "-march=i686" << "-mtune=generic"
                }
                linker.withArguments { List<String> args ->
                    args << "-m32"
                }
            }
            target("linux_x86_64")
        }

        mingw_w64(Gcc) {
            path "/usr/bin"
            eachPlatform() {
                if(platform == platforms.windows_x86) {
                    cCompiler.executable "i686-w64-mingw32-gcc"
                    cppCompiler.executable "i686-w64-mingw32-g++"
                    linker.executable "i686-w64-mingw32-g++"
                    assembler.executable "i686-w64-mingw32-as"
                    staticLibArchiver.executable "i686-w64-mingw32-ar"
                }
                else if(platform == platforms.windows_x86_64) {
                    cCompiler.executable "x86_64-w64-mingw32-gcc"
                    cppCompiler.executable "x86_64-w64-mingw32-g++"
                    linker.executable "x86_64-w64-mingw32-g++"
                    assembler.executable "x86_64-w64-mingw32-as"
                    staticLibArchiver.executable "x86_64-w64-mingw32-ar"
                }
            }
            target("windows_x86")
            target("windows_x86_64")
        }
    }
}

libraries {
    ResourcePacker {
        targetPlatforms "linux_x86", "linux_x86_64", "windows_x86", "windows_x86_64"

        binaries.all {
            cppCompiler.args "-std=c++11", "-Wall", "-Wextra"

            if(buildType == buildTypes.debug) {
                cppCompiler.args "-O0", "-g"
            }
            else if(buildType == buildTypes.release) {
                cppCompiler.define "NDEBUG"
                cppCompiler.args "-O3"
            }
        }
        binaries.withType(SharedLibraryBinarySpec) { binary ->
            cppCompiler.define "BUILD_SHARED_LIBS"
            if(targetPlatform == platforms.windows_x86 || targetPlatform == platforms.windows_x86_64) {
                cppCompiler.define "ResourcePacker_EXPORTS"
                def importLibPath = new File(binary.sharedLibraryLinkFile.parentFile, "libResourcePacker.a")
                linker.args "-Wl,--out-implib,${importLibPath}"
            }
        }
    }
}

executables {
    RP_main {
        targetPlatforms "linux_x86", "linux_x86_64", "windows_x86", "windows_x86_64"

        binaries.all {
            cppCompiler.args "-std=c++11", "-Wall", "-Wextra"

            if(buildType == buildTypes.debug) {
                cppCompiler.args "-O0", "-g"
            }
            else if(buildType == buildTypes.release) {
                cppCompiler.define "NDEBUG"
                cppCompiler.args "-O3"
            }
        }
    }
}

sources {
    ResourcePacker {
        cpp {
            source {
                srcDir "${projectDir}/src/ResourcePacker/cpp"
                include "*.cpp"
            }
            exportedHeaders {
                srcDir "${projectDir}/src/ResourcePacker/headers"
            }
        }
    }
    RP_main {
        cpp {
            lib libraries.ResourcePacker
            source {
                srcDir "${projectDir}/src/RP_main/cpp"
                include "*.cpp"
            }
            exportedHeaders {
                srcDir "${projectDir}/src/ResourcePacker/headers"
            }
        }
    }
}

